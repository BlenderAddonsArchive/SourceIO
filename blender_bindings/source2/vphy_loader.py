from math import atan, pi, sqrt

import bpy
from mathutils import Euler, Matrix, Vector

from ...library.source2.data_types.blocks.phys_block import PhysBlock
from ...library.utils.math_utilities import SOURCE2_HAMMER_UNIT_TO_METERS

CAPSULE_VERTICES = [(0.276388019323349, -0.8506492376327515, 0.9472198486328125),
                    (-0.7236073017120361, -0.5257253050804138, 0.9472194910049438),
                    (-0.7236073017120361, 0.5257253050804138, 0.9472194910049438),
                    (0.276388019323349, 0.8506492376327515, 0.9472198486328125),
                    (0.8944262266159058, 0.0, 0.9472155570983887),
                    (0.0, 0.0, 1.5),
                    (0.9510578513145447, -0.30901262164115906, 0.5),
                    (0.9510578513145447, 0.30901262164115906, 0.5),
                    (0.0, -0.9999999403953552, 0.5),
                    (0.5877856016159058, -0.8090167045593262, 0.5),
                    (-0.9510578513145447, -0.30901262164115906, 0.5),
                    (-0.5877856016159058, -0.8090167045593262, 0.5),
                    (-0.5877856016159058, 0.8090167045593262, 0.5),
                    (-0.9510578513145447, 0.30901262164115906, 0.5),
                    (0.5877856016159058, 0.8090167045593262, 0.5),
                    (0.0, 0.9999999403953552, 0.5),
                    (0.6881893873214722, -0.49999693036079407, 1.0257362127304077),
                    (-0.26286882162094116, -0.8090116381645203, 1.0257376432418823),
                    (-0.8506478667259216, 0.0, 1.025735855102539),
                    (-0.26286882162094116, 0.8090116381645203, 1.0257376432418823),
                    (0.6881893873214722, 0.49999693036079407, 1.0257362127304077),
                    (0.16245555877685547, -0.49999526143074036, 1.3506543636322021),
                    (0.525729775428772, 0.0, 1.350651741027832),
                    (-0.42532268166542053, -0.30901139974594116, 1.350654125213623),
                    (-0.42532268166542053, 0.30901139974594116, 1.350654125213623),
                    (0.16245555877685547, 0.49999526143074036, 1.3506543636322021),
                    (0.276388019323349, -0.8506492376327515, -0.9472198486328125),
                    (-0.7236073017120361, -0.5257253050804138, -0.9472194910049438),
                    (-0.7236073017120361, 0.5257253050804138, -0.9472194910049438),
                    (0.276388019323349, 0.8506492376327515, -0.9472198486328125),
                    (0.8944262266159058, 0.0, -0.9472155570983887),
                    (0.0, 0.0, -1.5),
                    (0.9510578513145447, -0.30901262164115906, -0.5),
                    (0.9510578513145447, 0.30901262164115906, -0.5),
                    (0.0, -0.9999999403953552, -0.5),
                    (0.5877856016159058, -0.8090167045593262, -0.5),
                    (-0.9510578513145447, -0.30901262164115906, -0.5),
                    (-0.5877856016159058, -0.8090167045593262, -0.5),
                    (-0.5877856016159058, 0.8090167045593262, -0.5),
                    (-0.9510578513145447, 0.30901262164115906, -0.5),
                    (0.5877856016159058, 0.8090167045593262, -0.5),
                    (0.0, 0.9999999403953552, -0.5),
                    (0.6881893873214722, -0.49999693036079407, -1.0257362127304077),
                    (-0.26286882162094116, -0.8090116381645203, -1.0257376432418823),
                    (-0.8506478667259216, 0.0, -1.025735855102539),
                    (-0.26286882162094116, 0.8090116381645203, -1.0257376432418823),
                    (0.6881893873214722, 0.49999693036079407, -1.0257362127304077),
                    (0.16245555877685547, -0.49999526143074036, -1.3506543636322021),
                    (0.525729775428772, 0.0, -1.350651741027832),
                    (-0.42532268166542053, -0.30901139974594116, -1.350654125213623),
                    (-0.42532268166542053, 0.30901139974594116, -1.350654125213623),
                    (0.16245555877685547, 0.49999526143074036, -1.3506543636322021)]
CAPSULE_POLYGONS = [(0, 16, 21), (1, 17, 23), (2, 18, 24), (3, 19, 25), (4, 20, 22), (22, 25, 5), (22, 20, 25),
                    (20, 3, 25),
                    (25, 24, 5), (25, 19, 24), (19, 2, 24), (24, 23, 5), (24, 18, 23), (18, 1, 23), (23, 21, 5),
                    (23, 17, 21),
                    (17, 0, 21), (21, 22, 5), (21, 16, 22), (16, 4, 22), (7, 20, 4), (7, 14, 20), (14, 3, 20),
                    (15, 19, 3),
                    (15, 12, 19), (12, 2, 19), (13, 18, 2), (13, 10, 18), (10, 1, 18), (11, 17, 1), (11, 8, 17),
                    (8, 0, 17),
                    (9, 16, 0), (9, 6, 16), (6, 4, 16), (14, 15, 3), (12, 13, 2), (10, 11, 1), (8, 9, 0), (6, 7, 4),
                    (26, 47, 42),
                    (27, 49, 43), (28, 50, 44), (29, 51, 45), (30, 48, 46), (48, 31, 51), (48, 51, 46), (46, 51, 29),
                    (51, 31, 50),
                    (51, 50, 45), (45, 50, 28), (50, 31, 49), (50, 49, 44), (44, 49, 27), (49, 31, 47), (49, 47, 43),
                    (43, 47, 26),
                    (47, 31, 48), (47, 48, 42), (42, 48, 30), (33, 30, 46), (33, 46, 40), (40, 46, 29), (41, 29, 45),
                    (41, 45, 38),
                    (38, 45, 28), (39, 28, 44), (39, 44, 36), (36, 44, 27), (37, 27, 43), (37, 43, 34), (34, 43, 26),
                    (35, 26, 42),
                    (35, 42, 32), (32, 42, 30), (40, 29, 41), (38, 28, 39), (36, 27, 37), (34, 26, 35), (32, 30, 33),
                    (9, 8, 34, 35),
                    (6, 9, 35, 32), (7, 6, 32, 33), (14, 7, 33, 40), (15, 14, 40, 41), (12, 15, 41, 38),
                    (13, 12, 38, 39),
                    (10, 13, 39, 36), (11, 10, 36, 37), (8, 11, 37, 34)]


def load_physics(phys_block: PhysBlock, scale: float = SOURCE2_HAMMER_UNIT_TO_METERS):
    parts = phys_block["m_parts"]
    indices = phys_block["m_boneParents"]
    names = phys_block["m_boneNames"]
    matrices = phys_block["m_bindPose"]
    shapes = []
    for parent, part, matrix in zip(indices, parts, matrices):
        bone_matrix = Matrix(matrix.reshape((3, 4))).to_4x4()

        shape = part["m_rnShape"]

        spheres = shape["m_spheres"]
        capsules = shape["m_capsules"]
        hulls = shape["m_hulls"]
        meshes = shape["m_meshes"]
        for capsule_info in capsules:
            capsule = capsule_info["m_Capsule"]
            capsule_start, capsule_end = capsule["m_vCenter"]
            radius = capsule["m_flRadius"]

            mesh_data = bpy.data.meshes.new(name=f'{names[parent]}_mesh')
            mesh_obj = bpy.data.objects.new(name=names[parent], object_data=mesh_data)

            capsule_start = Vector(capsule_start)
            capsule_end = Vector(capsule_end)
            capsule_start = (bone_matrix @ capsule_start) * scale
            capsule_end = (bone_matrix @ capsule_end) * scale

            x = capsule_end[0] - capsule_start[0]
            y = capsule_end[1] - capsule_start[1]
            z = capsule_end[2] - capsule_start[2]

            mag = sqrt(x ** 2 + y ** 2)

            if x == 0:
                beta = 0
            else:
                beta = atan(y / x)
            if (x <= 0 <= y) or (x <= 0 and y <= 0):
                beta = pi + beta
            if mag == 0:
                theta = pi / 2
            else:
                theta = atan(z / mag)

            gap = (capsule_end - capsule_start).magnitude
            location = capsule_start + (capsule_end - capsule_start) / 2
            final_matrix = Matrix.LocRotScale(location, Euler((0, -theta + pi / 2, beta)),
                                              Vector((scale * radius, scale * radius, gap / 2)))
            vertices = []
            for v in CAPSULE_VERTICES:
                vertices.append(final_matrix @ Vector(v))

            mesh_data.from_pydata(vertices, [], CAPSULE_POLYGONS)
            mesh_data.update()
            shapes.append(mesh_obj)

            bpy.context.scene.collection.objects.link(mesh_obj)
    return shapes